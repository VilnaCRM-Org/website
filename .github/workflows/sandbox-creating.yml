name: sandbox

on:
  pull_request:
    types: [opened]
  push:
    branches-ignore: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

permissions:
  id-token: write
  contents: read
  pull-requests: read

jobs:
  check-tokens:
    runs-on: ubuntu-latest
    outputs:
      rotate_test_needed: ${{ steps.determine_test_rotation.outputs.rotate_test_needed }}
      rotate_prod_needed: ${{ steps.determine_prod_rotation.outputs.rotate_prod_needed }}
    steps:
      - name: Configure AWS Credentials (Test)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{vars.TEST_AWS_ACCOUNT_ID}}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Test Rotation
        id: determine_test_rotation
        run: |
          if ! SECRET_ID=$(aws secretsmanager list-secrets \
            --region "${AWS_REGION}" \
            --query "SecretList[?starts_with(Name, 'github-token-') && DeletionDate==null].Name | [0]" \
            --output text); then
            echo "::error::Failed to list secrets: ${SECRET_ID}"
            exit 1
          fi

          if [ -z "$SECRET_ID" ] || [ "$SECRET_ID" = "None" ]; then
            echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
          else
            SECRET_VALUE=$(aws secretsmanager get-secret-value \
              --secret-id "${SECRET_ID}" \
              --region "${AWS_REGION}" \
              --query SecretString \
              --output text)

            EXPIRES_AT=$(echo "$SECRET_VALUE" | jq -r '.expires_at // empty')
            if [ -z "$EXPIRES_AT" ]; then
              echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
            else
              NOW=$(date -u +%s)
              EXPIRATION_TIME=$(date -d "$EXPIRES_AT" +%s 2>/dev/null)
              if [ "$NOW" -ge "$EXPIRATION_TIME" ]; then
                echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
              else
                echo "rotate_test_needed=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: Configure AWS Credentials (Prod)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{vars.PROD_AWS_ACCOUNT_ID}}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Prod Rotation
        id: determine_prod_rotation
        run: |
          if ! SECRET_ID=$(aws secretsmanager list-secrets \
            --region "${AWS_REGION}" \
            --query "SecretList[?starts_with(Name, 'github-token-') && DeletionDate==null].Name | [0]" \
            --output text); then
            echo "::error::Failed to list secrets: ${SECRET_ID}"
            exit 1
          fi

          if [ -z "$SECRET_ID" ] || [ "$SECRET_ID" = "None" ]; then
            echo "rotate_prod_needed=true" >> $GITHUB_OUTPUT
          else
            SECRET_VALUE=$(aws secretsmanager get-secret-value \
              --secret-id "${SECRET_ID}" \
              --region "${AWS_REGION}" \
              --query SecretString \
              --output text)

            EXPIRES_AT=$(echo "$SECRET_VALUE" | jq -r '.expires_at // empty')
            if [ -z "$EXPIRES_AT" ]; then
              echo "rotate_prod_needed=true" >> $GITHUB_OUTPUT
            else
              NOW=$(date -u +%s)
              EXPIRATION_TIME=$(date -d "$EXPIRES_AT" +%s 2>/dev/null)
              if [ "$NOW" -ge "$EXPIRATION_TIME" ]; then
                echo "rotate_prod_needed=true" >> $GITHUB_OUTPUT
              else
                echo "rotate_prod_needed=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

  rotate-tokens:
    runs-on: ubuntu-latest
    needs: [check-tokens]
    if: needs.check-tokens.outputs.rotate_test_needed == 'true' || needs.check-tokens.outputs.rotate_prod_needed == 'true'
    steps:
      - name: Retrieve GitHub Token from Secrets Manager
        run: |
          GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id github-token --query SecretString --output text --region ${{ env.AWS_REGION }})
          echo "GITHUB_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV

      - name: Trigger Test Rotation
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/VilnaCRM-Org/website-infrastructure/dispatches \
            -d '{"event_type":"rotate_token_test"}'

      - name: Trigger Prod Rotation
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/VilnaCRM-Org/website-infrastructure/dispatches \
            -d '{"event_type":"rotate_token_prod"}'

  deploy:
    runs-on: ubuntu-latest
    needs: [check-tokens]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{vars.PROD_AWS_ACCOUNT_ID}}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Retrieve GitHub Token from Secrets Manager
        run: |
          SECRET_ID=$(aws secretsmanager list-secrets \
            --region "${AWS_REGION}" \
            --query "SecretList[?starts_with(Name, 'github-token-') && DeletionDate==null].Name | [0]" \
            --output text)

          if [ -z "$SECRET_ID" ] || [ "$SECRET_ID" = "None" ]; then
            echo "No active secret found with prefix 'github-token-'"
            exit 1
          fi

          GITHUB_TOKEN=$(aws secretsmanager get-secret-value \
            --region "${AWS_REGION}" \
            --secret-id "$SECRET_ID" \
            --query "SecretString" \
            --output text)

          echo "GITHUB_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV

      - name: Get PR Number
        id: get_pr_number
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls?head=${GITHUB_REPOSITORY_OWNER}:${GITHUB_REF_NAME}")
          if [ $? -ne 0 ]; then
            echo "::error::Failed to retrieve PR number: ${PR_NUMBER}"
            exit 1
          fi
          PR_NUMBER=$(echo "$RESPONSE" | jq -r '.[0].number')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Configure AWS Credentials (Sandbox Creation Trigger Role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{vars.PROD_AWS_ACCOUNT_ID}}:role/sandbox-creation-trigger-role
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate AWS Region
        run: |
          echo "AWS Region: ${{ env.AWS_REGION }}"

      - name: Start Pipeline Execution
        run: |
          aws codepipeline start-pipeline-execution --name "sandbox-creation" \
            --variables "name=BRANCH_NAME,value=${BRANCH_NAME}" "name=PR_NUMBER,value=${PR_NUMBER}" "name=IS_PULL_REQUEST,value=1"