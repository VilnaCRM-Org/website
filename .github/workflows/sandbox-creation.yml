name: Sandbox Creation and Rebuild

on:
  pull_request:
    types: [opened]
  push:
    branches-ignore: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

permissions:
  id-token: write
  contents: read

jobs:
  CheckTokenInSecretsManager:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUB_TOKEN_ROTATION_ROLE_TO_ASSUME_TEST }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Token and Timestamp
        id: check_token
        run: |
          SECRET_NAME="github-token"
          if [ -z "$SECRET_NAME" ]; then
            echo "No SECRET_NAME defined, need rotation."
            echo "rotate_needed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --region ${{ env.AWS_REGION }} --query SecretString --output text 2>/dev/null)
          if [ $? -ne 0 ] || [ -z "$SECRET_VALUE" ]; then
            echo "Failed to retrieve secret or secret empty. rotate_needed=true"
            echo "rotate_needed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          TIMESTAMP=$(echo "$SECRET_VALUE" | jq -r '.timestamp // empty')
          if [ -z "$TIMESTAMP" ]; then
            echo "No timestamp in secret JSON. rotate_needed=true"
            echo "rotate_needed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          NOW=$(date +%s)
          LAST_ROTATED_UNIX=$(date -d "$TIMESTAMP" +%s 2>/dev/null)
          if [ -z "$LAST_ROTATED_UNIX" ]; then
            echo "Invalid timestamp format. rotate_needed=true"
            echo "rotate_needed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          MAX_AGE=601200
          AGE=$((NOW - LAST_ROTATED_UNIX))
          if [ $AGE -ge $MAX_AGE ]; then
            echo "Token older than 6d23h, rotate_needed=true"
            echo "rotate_needed=true" >> $GITHUB_OUTPUT
          else
            echo "Token still valid, rotate_needed=false"
            echo "rotate_needed=false" >> $GITHUB_OUTPUT
          fi

  TriggerRotation:
    runs-on: ubuntu-latest
    needs: [CheckTokenInSecretsManager]
    if: needs.CheckTokenInSecretsManager.outputs.rotate_needed == 'True'
    steps:
      - name: Send repository_dispatch to website-infrastructure
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/<your_org_or_user>/website-infrastructure/dispatches \
            -d '{"event_type":"rotate_token"}'

        env:
          GITHUB_TOKEN: ${{ secrets.PAT_WITH_REPO_PERMISSIONS }}

  SandboxPipelineExecution:
    runs-on: ubuntu-latest
    needs: [CheckTokenInSecretsManager, TriggerRotation]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_CODEPIPELINE_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Branch and Secrets
        run: |
          # Validate required secrets
          missing_secrets=()
          [ -z "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" ] && missing_secrets+=("AWS_SANDBOX_CODEPIPELINE_NAME")
          [ -z "${{ secrets.AWS_CODEPIPELINE_ROLE_ARN }}" ] && missing_secrets+=("AWS_CODEPIPELINE_ROLE_ARN")
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "::error::Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi

      - name: Start Pipeline Execution
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull_request event
            PR_NUMBER="${{ github.event.number }}"
            if ! aws codepipeline start-pipeline-execution \
              --name "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" \
              --variables \
                "name=BRANCH_NAME,value=${BRANCH_NAME}" \
                "name=PR_NUMBER,value=${PR_NUMBER}"; then
              echo "::error::Failed to start pipeline execution for pull request"
              exit 1
            fi
          else
            # For push event
            if ! aws codepipeline start-pipeline-execution \
              --name "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" \
              --variables \
                "name=BRANCH_NAME,value=${BRANCH_NAME}" \
                "name=IS_PULL_REQUEST,value=0"; then
              echo "::error::Failed to start pipeline execution for push"
              exit 1
            fi
          fi
