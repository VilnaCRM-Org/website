name: Sandbox Creation and Rebuild

on:
  pull_request:
    types: [opened]
  push:
    branches-ignore: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

permissions:
  id-token: write
  contents: read
  pull-requests: read

jobs:
  CheckTokenInSecretsManager:
    runs-on: ubuntu-latest
    outputs:
      rotate_test_needed: ${{ steps.determine_test_rotation.outputs.rotate_test_needed }}
    steps:
      - name: Configure AWS Credentials (Test)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{vars.TEST_AWS_ACCOUNT_ID}}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Test Rotation
        id: determine_test_rotation
        run: |
          SECRET_ID=$(aws secretsmanager list-secrets \
            --region "${AWS_REGION}" \
            --query "SecretList[?starts_with(Name, 'github-token-') && DeletionDate==null].Name | [0]" \
            --output text)

          if [ -z "$SECRET_ID" ] || [ "$SECRET_ID" = "None" ]; then
            echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
          else
            SECRET_VALUE=$(aws secretsmanager get-secret-value \
              --secret-id "${SECRET_ID}" \
              --region "${AWS_REGION}" \
              --query SecretString \
              --output text)

            TIMESTAMP=$(echo "$SECRET_VALUE" | jq -r '.timestamp // empty')
            if [ -z "$TIMESTAMP" ]; then
              echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
            else
              NOW=$(date +%s)
              LAST_ROTATED=$(date -d "$TIMESTAMP" +%s 2>/dev/null)
              MAX_AGE=601200
              [ -z "$MAX_AGE" ] && MAX_AGE=601200
              AGE=$((NOW - LAST_ROTATED))
              if [ "$AGE" -ge "$MAX_AGE" ]; then
                echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
              else
                echo "rotate_test_needed=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

  TriggerRotation:
    runs-on: ubuntu-latest
    needs: [CheckTokenInSecretsManager]
    if: needs.CheckTokenInSecretsManager.outputs.rotate_test_needed == 'true'
    steps:
      - name: Trigger Test Rotation
        if: needs.CheckTokenInSecretsManager.outputs.rotate_test_needed == 'true'
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/VilnaCRM-Org/website-infrastructure/dispatches \
            -d '{"event_type":"rotate_token_test"}'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_WITH_REPO_PERMISSIONS }}

  SandboxPipelineExecution:
    runs-on: ubuntu-latest
    needs: [CheckTokenInSecretsManager]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{vars.TEST_AWS_ACCOUNT_ID}}:role/sandbox-creation-trigger-role
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Get PR Number
        id: get_pr_number
        run: |
          PR_NUMBER=$(curl -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls?head=${GITHUB_REPOSITORY_OWNER}:${GITHUB_REF_NAME}" | jq -r '.[0].number')
          echo "PR_NUMBER=$PR_NUMBER"
          if [ -z "$PR_NUMBER" ]; then
            echo "PR_NUMBER not found for branch ${BRANCH_NAME}"
            exit 1
          fi
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_WITH_REPO_PERMISSIONS }}

      - name: Start Pipeline Execution
        run: |
          PR_NUMBER="${{ env.PR_NUMBER }}"
          if ! aws codepipeline start-pipeline-execution \
            --name "sandbox-creation" \
            --variables \
              "name=BRANCH_NAME,value=${BRANCH_NAME}" \
              "name=PR_NUMBER,value=${PR_NUMBER}" \
              "name=IS_PULL_REQUEST,value=1"; then
            echo "::error::Failed to start pipeline execution"
            exit 1
          fi