name: Sandbox Creation and Rebuild

on:
  pull_request:
    types: [opened]
  push:
    branches-ignore: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

permissions:
  id-token: write
  contents: read

jobs:
  CheckTokenInSecretsManager:
    runs-on: ubuntu-latest
    outputs:
      rotate_test_needed: ${{ steps.determine_test_rotation.outputs.rotate_test_needed }}
      rotate_prod_needed: ${{ steps.determine_prod_rotation.outputs.rotate_prod_needed }}
    steps:
      - name: Configure AWS Credentials (Test)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUB_TOKEN_ROTATION_ROLE_TO_ASSUME_TEST }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Token Rotation Check Function
        id: setup_rotation_check
        run: |
          check_token_rotation() {
            local env_name="$1"
            local secret_name="$2"
            local output_var="$3"

            if [ -z "$secret_name" ]; then
              echo "${output_var}=true" >> $GITHUB_OUTPUT
              return 0
            fi

            if ! secret_value=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --region "$AWS_REGION" --query SecretString --output text 2>&1); then
              echo "Failed to retrieve $env_name secret: $secret_value"
              echo "${output_var}=true" >> $GITHUB_OUTPUT
              return 0
            fi

            timestamp=$(echo "$secret_value" | jq -r '.timestamp // empty')
            if [ -z "$timestamp" ]; then
              echo "${output_var}=true" >> $GITHUB_OUTPUT
              return 0
            fi

            now=$(date +%s)
            last_rotated_unix=$(date -d "$timestamp" +%s 2>/dev/null)
            if [ -z "$last_rotated_unix" ]; then
              echo "${output_var}=true" >> $GITHUB_OUTPUT
              return 0
            fi

            max_age="${{ vars.TOKEN_MAX_AGE_SECONDS }}"
            [ -z "$max_age" ] && max_age=601200
            age=$((now - last_rotated_unix))
            if [ $age -ge $max_age ]; then
              echo "${output_var}=true" >> $GITHUB_OUTPUT
            else
              echo "${output_var}=false" >> $GITHUB_OUTPUT
            fi
          }

      - name: Determine Test Rotation
        id: determine_test_rotation
        run: |
          check_token_rotation "test" "${{ secrets.GITHUB_TOKEN_SECRET_NAME }}" "rotate_test_needed"

      - name: Configure AWS Credentials (Prod)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUB_TOKEN_ROTATION_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Prod Rotation
        id: determine_prod_rotation
        run: |
          check_token_rotation "prod" "${{ secrets.GITHUB_TOKEN_SECRET_NAME }}" "rotate_prod_needed"

  TriggerRotation:
    runs-on: ubuntu-latest
    needs: [CheckTokenInSecretsManager]
    if: needs.CheckTokenInSecretsManager.outputs.rotate_test_needed == 'true' || needs.CheckTokenInSecretsManager.outputs.rotate_prod_needed == 'true'
    steps:
      - name: Trigger Test Rotation
        if: needs.CheckTokenInSecretsManager.outputs.rotate_test_needed == 'true'
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/<your_org>/website-infrastructure/dispatches \
            -d '{"event_type":"rotate_token_test"}'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_WITH_REPO_PERMISSIONS }}

      - name: Trigger Prod Rotation
        if: needs.CheckTokenInSecretsManager.outputs.rotate_prod_needed == 'true'
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/<your_org>/website-infrastructure/dispatches \
            -d '{"event_type":"rotate_token_prod"}'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_WITH_REPO_PERMISSIONS }}

  SandboxPipelineExecution:
    runs-on: ubuntu-latest
    needs: [CheckTokenInSecretsManager, TriggerRotation]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_CODEPIPELINE_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Branch and Secrets
        run: |
          missing_secrets=()
          [ -z "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" ] && missing_secrets+=("AWS_SANDBOX_CODEPIPELINE_NAME")
          [ -z "${{ secrets.AWS_CODEPIPELINE_ROLE_ARN }}" ] && missing_secrets+=("AWS_CODEPIPELINE_ROLE_ARN")
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "::error::Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi

      - name: Start Pipeline Execution
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
            if ! aws codepipeline start-pipeline-execution \
              --name "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" \
              --variables \
                "name=BRANCH_NAME,value=${BRANCH_NAME}" \
                "name=PR_NUMBER,value=${PR_NUMBER}"; then
              echo "::error::Failed to start pipeline execution for pull request"
              exit 1
            fi
          else
            if ! aws codepipeline start-pipeline-execution \
              --name "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" \
              --variables \
                "name=BRANCH_NAME,value=${BRANCH_NAME}" \
                "name=IS_PULL_REQUEST,value=0"; then
              echo "::error::Failed to start pipeline execution for push"
              exit 1
            fi
          fi
