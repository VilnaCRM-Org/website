name: Sandbox Creation and Rebuild

on:
  pull_request:
    types: [opened]
  push:
    branches-ignore: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

permissions:
  id-token: write
  contents: read

jobs:
  CheckTokenInSecretsManager:
    runs-on: ubuntu-latest
    outputs:
      rotate_test_needed: ${{ steps.determine_test_rotation.outputs.rotate_test_needed }}
      rotate_prod_needed: ${{ steps.determine_prod_rotation.outputs.rotate_prod_needed }}
    steps:
      - name: Configure AWS Credentials (Test)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_TOKEN_ROTATION_ROLE_TO_ASSUME_TEST }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Test Rotation
        id: determine_test_rotation
        run: |
          SECRET_ID=$(aws secretsmanager list-secrets \
            --region "${AWS_REGION}" \
            --query "SecretList[?starts_with(Name, 'github-token-') && DeletionDate==null].Name | [0]" \
            --output text)

          if [ -z "$SECRET_ID" ] || [ "$SECRET_ID" = "None" ]; then
            echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
          else
            SECRET_VALUE=$(aws secretsmanager get-secret-value \
              --secret-id "${SECRET_ID}" \
              --region "${AWS_REGION}" \
              --query SecretString \
              --output text)

            TIMESTAMP=$(echo "$SECRET_VALUE" | jq -r '.timestamp // empty')
            if [ -z "$TIMESTAMP" ]; then
              echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
            else
              NOW=$(date +%s)
              LAST_ROTATED=$(date -d "$TIMESTAMP" +%s 2>/dev/null)
              MAX_AGE="${{ vars.TOKEN_MAX_AGE_SECONDS }}"
              [ -z "$MAX_AGE" ] && MAX_AGE=601200
              AGE=$((NOW - LAST_ROTATED))
              if [ "$AGE" -ge "$MAX_AGE" ]; then
                echo "rotate_test_needed=true" >> $GITHUB_OUTPUT
              else
                echo "rotate_test_needed=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: Configure AWS Credentials (Prod)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_TOKEN_ROTATION_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Prod Rotation
        id: determine_prod_rotation
        run: |
          SECRET_ID=$(aws secretsmanager list-secrets \
            --region "${AWS_REGION}" \
            --query "SecretList[?starts_with(Name, 'github-token-') && DeletionDate==null].Name | [0]" \
            --output text)

          if [ -z "$SECRET_ID" ] || [ "$SECRET_ID" = "None" ]; then
            echo "rotate_prod_needed=true" >> $GITHUB_OUTPUT
          else
            SECRET_VALUE=$(aws secretsmanager get-secret-value \
              --secret-id "${SECRET_ID}" \
              --region "${AWS_REGION}" \
              --query SecretString \
              --output text)

            TIMESTAMP=$(echo "$SECRET_VALUE" | jq -r '.timestamp // empty')
            if [ -z "$TIMESTAMP" ]; then
              echo "rotate_prod_needed=true" >> $GITHUB_OUTPUT
            else
              NOW=$(date +%s)
              LAST_ROTATED=$(date -d "$TIMESTAMP" +%s 2>/dev/null)
              MAX_AGE="${{ vars.TOKEN_MAX_AGE_SECONDS }}"
              [ -z "$MAX_AGE" ] && MAX_AGE=601200
              AGE=$((NOW - LAST_ROTATED))
              if [ "$AGE" -ge "$MAX_AGE" ]; then
                echo "rotate_prod_needed=true" >> $GITHUB_OUTPUT
              else
                echo "rotate_prod_needed=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

  TriggerRotation:
    runs-on: ubuntu-latest
    needs: [CheckTokenInSecretsManager]
    if: needs.CheckTokenInSecretsManager.outputs.rotate_test_needed == 'true' || needs.CheckTokenInSecretsManager.outputs.rotate_prod_needed == 'true'
    steps:
      - name: Trigger Test Rotation
        if: needs.CheckTokenInSecretsManager.outputs.rotate_test_needed == 'true'
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/<your_org>/website-infrastructure/dispatches \
            -d '{"event_type":"rotate_token_test"}'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_WITH_REPO_PERMISSIONS }}

      - name: Trigger Prod Rotation
        if: needs.CheckTokenInSecretsManager.outputs.rotate_prod_needed == 'true'
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/<your_org>/website-infrastructure/dispatches \
            -d '{"event_type":"rotate_token_prod"}'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_WITH_REPO_PERMISSIONS }}

  SandboxPipelineExecution:
    runs-on: ubuntu-latest
    needs: [CheckTokenInSecretsManager, TriggerRotation]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_CODEPIPELINE_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Branch and Secrets
        run: |
          missing_secrets=()
          [ -z "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" ] && missing_secrets+=("AWS_SANDBOX_CODEPIPELINE_NAME")
          [ -z "${{ secrets.AWS_CODEPIPELINE_ROLE_ARN }}" ] && missing_secrets+=("AWS_CODEPIPELINE_ROLE_ARN")
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "::error::Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi

      - name: Start Pipeline Execution
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
            if ! aws codepipeline start-pipeline-execution \
              --name "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" \
              --variables \
                "name=BRANCH_NAME,value=${BRANCH_NAME}" \
                "name=PR_NUMBER,value=${PR_NUMBER}" \
                "name=IS_PULL_REQUEST,value=1"; then
              echo "::error::Failed to start pipeline execution for pull request"
              exit 1
            fi
          else
            if ! aws codepipeline start-pipeline-execution \
              --name "${{ secrets.AWS_SANDBOX_CODEPIPELINE_NAME }}" \
              --variables \
                "name=BRANCH_NAME,value=${BRANCH_NAME}" \
                "name=PR_NUMBER,value=${PR_NUMBER}" \
                "name=IS_PULL_REQUEST,value=1"; then
              echo "::error::Failed to start pipeline execution for push"
              exit 1
            fi
          fi
